#include "std_lib_facilities.h"

//9.7.4

const vector<string> months = 
{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

enum class Month
{
	Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec
};

Month operator++(Month&m)
{
	m = (m == Month::Dec) ? Month::Jan : Month(int(m)+1);
	return m;
}

ostream& operator<<(ostream& os, Month m)
{
	return os << months[int(m)];
}

class Date
{
	int year;
	Month month;
	int day;
	
	public:
	class Invalid{};
	bool is_valid();
	Date(int y, Month m, int d): year(y), month(m), day(d) { if(!is_valid()) throw Invalid{}; }
	
	Month get_month() const {return month;}
	int get_day() const {return day;}
	int get_year() const {return year;}
	void add_day(int n);
	void add_year(int n);
};


ostream& operator<<(ostream& os, const Date& dd)
{
	return os << dd.get_year() << '.' << dd.get_month() << '.' << dd.get_day();
}

bool Date::is_valid()
{
	if(year > 0)
	{
	switch(month)
		{
		case Month::Jan: case Month::Mar: case Month::May: case Month::Jul: case Month::Aug: case Month::Oct: case Month::Dec:
			if(day > 0 && day < 32)
			return true;
			else
			return false;
			break;
			
		case Month::Feb:
			if(day > 0 && day < 29)
			return true;
			else
			return false;
			break;
			
		case Month::Apr: case Month::Jun: case Month::Sep: case Month::Nov:
			if(day > 0 && day < 31)
			return true;
			else
			return false;
			break;
		}
	}
	else
	{
		return false;
	}
	return is_valid();
}

void Date::add_day(int n)
{
	day += n;
	
	switch(month)
	{
		case Month::Jan: case Month::Mar: case Month::May: case Month::Jul: case Month::Aug: case Month::Oct: case Month::Dec:
		if(day > 31)
		{
			++month;
			day -= 31;
			if(month == Month::Jan)
			{
				year++ ;
			}
		}
		break;
		
		case Month::Feb:
		if(day > 28)
		{
			++month;
			day -= 28;
		} 
		break;
		
		case Month::Apr: case Month::Jun: case Month::Sep: case Month::Nov:
		if(day > 30)
		{
			++month;
			day -= 30;
		}
		break;
	}
}

void Date::add_year(int n)
{
	if(n > 0)
	year +=n;
	else
	error("kolb√°sz");
	
}

void f()
{
	Date today{1978,Month::Jun,25};
	
	cout<<"Today: "<<today<<'\n';
	
	Date tomorrow{today};
	
	tomorrow.add_day(1);
	cout<<"Tomorrow: "<<tomorrow<<'\n';
	
	Date next_year1{today};
	
	next_year1.add_year(1);
	cout<<"1 year after today: "<<next_year1<<'\n';
	
}

int main()
try{	
	f();	
	
	return 0;
} 
catch (Date::Invalid) {
	cout << "Invalid date\n" << endl;
	return 1;
} catch (exception& e) {
	cout << e.what() << endl;
	return 2;
}
